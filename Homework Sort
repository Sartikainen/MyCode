import java.util.Arrays;
import java.util.Random;

public class Sort {
    public static void main(String[] args) {
        int length = 30000;
        int[] arr = new int[length];

        BubbleSort.bubblesort(arr);
        InsertionSort.insertionSort(arr);
        SelectSortAscending.selectSortAscending(arr);

        Random random = new Random();
        for (int i = 0; i < arr.length; i++) {
            arr[i] = random.nextInt(1000);
        }
        long startTime3 = System.currentTimeMillis();
        Arrays.sort(arr);
        long endTime3 = System.currentTimeMillis();
        System.out.println("Arrays sort time is " + (endTime3-startTime3));
    }

    public static class BubbleSort {
        public static void bubblesort(int[] arr) {
            Random random = new Random();
            for (int i = 0; i < arr.length; i++) {
                arr[i] = random.nextInt(1000);
            }
            long startTime = System.currentTimeMillis();
            for (int i = 0; i < arr.length - 1; i++) {
                for (int j = 1; j < arr.length - i; j++) {
                    if (arr[j - 1] > arr[j]) {
                        int temp = arr[j];
                        arr[j] = arr[j - 1];
                        arr[j - 1] = temp;
                    }
                }
            }
            long endTime = System.currentTimeMillis();
            System.out.println("Bubble sort time is " + (endTime-startTime));
        }
    }
    public static class InsertionSort {
        public static void insertionSort(int[] arr) {
            Random random = new Random();
            for (int i = 0; i < arr.length; i++) {
                arr[i] = random.nextInt(1000);
            }
            long startTime1 = System.currentTimeMillis();
            for (int i = 1; i < arr.length; i++) {
                int key = arr[i];
                int j = i - 1;
                while (j >= 0 && arr[j] > key) {
                    arr[j + 1] = arr[j];
                    j = j - 1;
                }
                arr[j + 1] = key;
            }
            long endTime1 = System.currentTimeMillis();
            System.out.println("Insertion sort time is " + (endTime1-startTime1));
        }
    }
    public static class SelectSortAscending {
        public static void selectSortAscending(int[] arr) {
            Random random = new Random();
            for (int i = 0; i < arr.length; i++) {
                arr[i] = random.nextInt(1000);
            }
            long startTime2 = System.currentTimeMillis();
            for (int i = 0; i < arr.length - 1; i++) {
                int minElementIndex = i;
                for (int j = i + 1; j < arr.length; j++) {
                    if (arr[minElementIndex] > arr[j]) {
                        minElementIndex = j;
                    }
                }
                if (minElementIndex != i) {
                    int temp = arr[i];
                    arr[i] = arr[minElementIndex];
                    arr[minElementIndex] = temp;
                }
            }
            long endTime2 = System.currentTimeMillis();
            System.out.println("Select sort time is " + (endTime2-startTime2));
        }
    }
}
